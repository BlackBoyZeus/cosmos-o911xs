name: Web Deploy

on:
  push:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

# Ensure only one deployment runs at a time
concurrency:
  group: web-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: cosmos.azurecr.io
  IMAGE_NAME: cosmos-web
  NODE_VERSION: '18'

jobs:
  # Verify CI workflow has passed
  verify-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Check CI workflow status
        uses: actions/checkout@v3
      - run: |
          CI_STATUS=$(gh api repos/${{ github.repository }}/actions/workflows/web-ci.yml/runs | jq -r '.workflow_runs[0].conclusion')
          if [ "$CI_STATUS" != "success" ]; then
            echo "CI workflow must pass before deployment"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scan container image
  security-scan:
    needs: verify-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image for scanning
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          target: production
          load: true
          tags: ${{ env.IMAGE_NAME }}:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.10.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

  # Main deployment job
  deploy:
    needs: security-scan
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: https://cosmos-wfm.azurewebsites.net

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './src/web/package-lock.json'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          target: production
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_AUTH_DOMAIN=${{ secrets.VITE_AUTH_DOMAIN }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'cosmos-wfm'
          slot-name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run deployment validation
        run: |
          # Wait for deployment to stabilize
          sleep 30
          
          # Verify application health endpoint
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" https://cosmos-wfm.azurewebsites.net/health)
          if [ "$HEALTH_CHECK" != "200" ]; then
            echo "Health check failed"
            exit 1
          fi

  # Rollback on failure
  rollback:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Rollback deployment
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'cosmos-wfm'
          slot-name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:stable

      - name: Notify team of rollback
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Rollback Executed',
              body: `Deployment of ${context.sha} failed and was rolled back to previous stable version.`
            });