name: Backend Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/**'
      - 'infrastructure/kubernetes/backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: cosmos-wfm-backend
  IMAGE_TAG: ${{ github.sha }}
  KUBE_NAMESPACE: cosmos-wfm

permissions:
  contents: read
  packages: write
  deployments: write
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: 'fs'
          scan-ref: 'src/backend'
          severity: ${{ secrets.SECURITY_SCAN_LEVEL || 'HIGH,CRITICAL' }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-push:
    name: Build and Push Image
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NVIDIA_CUDA_VERSION=12.0
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Scan built image
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: ${{ secrets.SECURITY_SCAN_LEVEL || 'HIGH,CRITICAL' }}

  deploy:
    name: Deploy to Kubernetes
    needs: build-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
      - name: Validate Kubernetes manifests
        uses: azure/k8s-lint@v1
        with:
          manifests: |
            infrastructure/kubernetes/backend/deployment.yaml
            infrastructure/kubernetes/backend/service.yaml

      - name: Verify GPU resources
        run: |
          kubectl get nodes -l nvidia.com/gpu=true
          kubectl describe quota -n ${{ env.KUBE_NAMESPACE }} gpu-quota || true
          if [[ $(kubectl get nodes -l nvidia.com/gpu=true -o json | jq '.items | length') -eq 0 ]]; then
            echo "Error: No GPU nodes available in the cluster"
            exit 1
          fi

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          namespace: ${{ env.KUBE_NAMESPACE }}
          manifests: |
            infrastructure/kubernetes/backend/deployment.yaml
            infrastructure/kubernetes/backend/service.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          strategy: rolling
          timeout: 5m
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/cosmos-wfm-backend -n ${{ env.KUBE_NAMESPACE }}
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=cosmos-wfm-backend
          
      - name: Monitor GPU allocation
        run: |
          kubectl exec -n ${{ env.KUBE_NAMESPACE }} \
            $(kubectl get pod -n ${{ env.KUBE_NAMESPACE }} -l app=cosmos-wfm-backend -o jsonpath="{.items[0].metadata.name}") \
            -- nvidia-smi || true

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/cosmos-wfm-backend -n ${{ env.KUBE_NAMESPACE }}
          echo "::error::Deployment failed, initiating rollback"
          exit 1