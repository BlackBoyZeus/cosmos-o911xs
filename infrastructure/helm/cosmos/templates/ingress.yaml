{{- if .Values.ingress.enabled -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ template "cosmos.fullname" . }}-ingress
  labels:
    {{- include "cosmos.labels" . | nindent 4 }}
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: {{ .Values.ingress.className | quote }}
    
    # TLS/Security Configuration
    cert-manager.io/cluster-issuer: {{ .Values.ingress.annotations.cert-manager.io/cluster-issuer | quote }}
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: camera=(), microphone=(), geolocation=()";
    
    # WAF and Security Rules
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyLimit 50000000
      SecRequestBodyNoFilesLimit 500000
      SecRule REQUEST_HEADERS:User-Agent "@contains bad" "deny,status:403,id:1,msg:'Bad UA'"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/limit-rps: {{ .Values.ingress.rateLimit.requestsPerSecond | quote }}
    nginx.ingress.kubernetes.io/limit-connections: {{ .Values.ingress.rateLimit.connections | quote }}
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "3"
    nginx.ingress.kubernetes.io/limit-rpm: {{ mul .Values.ingress.rateLimit.requestsPerSecond 60 | quote }}
    
    # Timeouts and Buffer Sizes
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/large-client-header-buffers: "4 32k"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: {{ .Values.monitoring.metricsPort | quote }}
    prometheus.io/scheme: "https"

spec:
  {{- if .Values.ingress.tls.enabled }}
  tls:
  - hosts:
    {{- range .Values.ingress.hosts }}
    - {{ .host | quote }}
    {{- end }}
    secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
  - host: {{ .host | quote }}
    http:
      paths:
      # API Service Routes
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: {{ template "cosmos.fullname" $ }}-api
            port:
              number: {{ $.Values.api.service.port }}
      
      # Model Inference Routes
      - path: /inference
        pathType: Prefix
        backend:
          service:
            name: {{ template "cosmos.fullname" $ }}-inference
            port:
              number: {{ $.Values.inference.service.port }}
      
      # Training Pipeline Routes
      - path: /training
        pathType: Prefix
        backend:
          service:
            name: {{ template "cosmos.fullname" $ }}-training
            port:
              number: {{ $.Values.training.service.port }}
      
      # Monitoring Routes
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: {{ template "cosmos.fullname" $ }}-monitoring
            port:
              number: {{ $.Values.monitoring.metricsPort }}
  {{- end }}
{{- end }}