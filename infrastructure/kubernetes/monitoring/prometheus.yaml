# Prometheus Kubernetes Configuration for Cosmos WFM Platform
# Version: v2.44.0
# Dependencies:
# - prometheus-operator: 0.68.0
# - prometheus-node-exporter: v1.6.0
# - kube-state-metrics: v2.9.2

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: cosmos
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      query_log_file: /prometheus/query.log
      external_labels:
        cluster: cosmos-wfm
        environment: production

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
            action: keep
            regex: default;kubernetes

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (\d+)
            replacement: $1
            target_label: __metrics_port__

      - job_name: 'gpu-metrics'
        static_configs:
          - targets: ['dcgm-exporter-service:9400']
        metrics_path: /metrics
        scheme: http

      - job_name: 'model-metrics'
        static_configs:
          - targets: ['cosmos-model-service:8080']
        metrics_path: /metrics
        scheme: http

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['alertmanager:9093']

    rule_files:
      - /etc/prometheus/rules/*.yml

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: cosmos
  labels:
    app: prometheus
    component: monitoring
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http
  selector:
    app: prometheus

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: cosmos
  labels:
    app: prometheus
    component: monitoring
    version: v2.44.0
spec:
  replicas: 2
  serviceName: prometheus
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9090'
      labels:
        app: prometheus
    spec:
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.44.0
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=30d
            - --storage.tsdb.wal-compression=true
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
            - --web.enable-lifecycle
            - --web.enable-admin-api
            - --query.timeout=5m
            - --query.max-samples=50000000
          ports:
            - containerPort: 9090
              name: http
          resources:
            limits:
              cpu: "4"
              memory: 8Gi
            requests:
              cpu: "2"
              memory: 4Gi
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
  volumeClaimTemplates:
    - metadata:
        name: prometheus-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 500Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: cosmos
data:
  alerts.yml: |
    groups:
      - name: cosmos-alerts
        rules:
          - alert: HighModelLatency
            expr: cosmos_model_inference_latency_seconds > 600
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: High model inference latency
              description: Model inference latency is above 600 seconds

          - alert: GPUUtilizationHigh
            expr: nvidia_gpu_duty_cycle > 90
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: High GPU utilization
              description: GPU utilization is above 90%

          - alert: HighAPIRequestRate
            expr: rate(cosmos_api_requests_total[5m]) > 100
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: High API request rate
              description: API request rate exceeds 100 req/s

          - alert: UnauthorizedAccess
            expr: rate(cosmos_unauthorized_access_total[5m]) > 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: Unauthorized access detected
              description: Unauthorized access attempts detected