version: "3.9"

services:
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: development
      args:
        NVIDIA_VISIBLE_DEVICES: all
        NVIDIA_DRIVER_CAPABILITIES: compute,utility
    env_file: ./src/backend/.env
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=mongodb
      - REDIS_HOST=redis
      - GPU_MEMORY_LIMIT=80GB
      - MODEL_CACHE_SIZE=20GB
      - DEBUG=cosmos:*
    volumes:
      - ./src/backend:/app
      - backend_node_modules:/app/node_modules
      - /usr/local/nvidia:/usr/local/nvidia:ro
    ports:
      - "3000:3000"
      - "9229:9229"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "8.0"
          memory: 96GB
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, compute, utility]
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "3"
    networks:
      - cosmos-network

  web:
    build:
      context: ./src/web
      dockerfile: Dockerfile
      target: development
      args:
        VITE_HOT_RELOAD: "true"
    env_file: ./src/web/.env
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://backend:3000
      - VITE_WS_URL=ws://backend:3000
      - VITE_DEV_SERVER_PORT=5173
      - VITE_HMR_PORT=24678
    volumes:
      - ./src/web:/app
      - web_node_modules:/app/node_modules
    ports:
      - "5173:5173"
      - "24678:24678"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cosmos-network

  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=cosmos
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_root_password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 8GB
    networks:
      - cosmos-network
    secrets:
      - mongodb_root_password

  redis:
    image: redis:7.0-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4GB
    networks:
      - cosmos-network
    secrets:
      - redis_password

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: /data/mongodb
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  backend_node_modules:
  web_node_modules:

networks:
  cosmos-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: cosmos0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

secrets:
  mongodb_root_password:
    file: ./secrets/mongodb_root_password.txt
  redis_password:
    file: ./secrets/redis_password.txt